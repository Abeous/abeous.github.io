@import 'common';

$emote-prefix: '.chat-emote-';
$css-animated-emote-animations: ();
$context-css-animated-emote-mixin: false;

// Mixin for defining an emote with a css animation.
// Should be used in combination with emote-animation mixin.
@mixin css-animated-emote($name, $can-animate-forever: false) {
    $context-css-animated-emote-mixin: true !global;
    #{$emote-prefix + $name} {
        @content;
        animation: $css-animated-emote-animations;
        $css-animated-emote-animations: () !global;

        &:hover {
            animation-iteration-count: infinite;
        }

        @if $can-animate-forever {
            &-animate-forever {
                animation-iteration-count: infinite;
            }
        }
    }

    $context-css-animated-emote-mixin: false !global;
}

// Mixin for defining an animation within a css-animated-emote mixin.
// $animation-properties takes the same properties as the `animation` property.
// The mixin body takes the `@keyframes` definition.
@mixin emote-animation($animation-properties: null){
    @if not $context-css-animated-emote-mixin {
        @error '`emote-animation` should be used inside `css-animated-emote` mixin!';
    }

    $index: length($css-animated-emote-animations);
    $suffix: if($index != 0, -#{$index}, '');
    $emote-name: str_slice( inspect(&), 2 + str_length($emote-prefix), -3 );
    $animation-name: #{$emote-name}-anim#{$suffix};

    @at-root {
        @keyframes #{$animation-name} {
            @content;
        }
    }

    $css-animated-emote-animations:
        append(
            $css-animated-emote-animations,
            $animation-properties $animation-name,
            comma
        ) !global;
}

@keyframes emote-hit {
    0% { color: #B91010; font-size:200%; }
    1% { color: $color-light; font-size:190%; }
    2% { color: #B91010; font-size:200%; }
    3% { color: $color-light; font-size:190%; }
    4% { color: #B91010; font-size:200%; }
    100% { color: $color-light; font-size:120%; }
}

$spritesDir : '../assets/emotes-animated/';

@mixin sprite-animation(
        $file-name,
        $frame-count,
        $sprite-width,
        $sprite-height,
        $animation-length,
        $repeat,
        $end-on-last-frame: false,
        $can-animate-forever: true,
        $file-ext: '.png') {

    $path: $spritesDir + $file-name + $file-ext;
    $frame-width: $sprite-width / $frame-count;

    @if $frame-width != round($frame-width) {
        @error
            "$sprite-width should be divisible by $frame-count to prevent blurry rendering
            Error on sprite-animation \"#{$file-name}\"";
    }

    @keyframes #{$file-name}-anim {
        0% { background-position: 0; }
        100% { background-position: -#{$sprite-width}; }
    }

    .chat-emote-#{$file-name}{
        width: $frame-width;
        height: $sprite-height;
        margin-top: -$sprite-height;
        background: url($path) left center;
        animation: #{$file-name}-anim $animation-length steps($frame-count) $repeat none;

        @if $end-on-last-frame {
            background-position: #{$sprite-width / $frame-count};
        };

        &:hover {
            animation: #{$file-name}-anim $animation-length steps($frame-count) infinite;
        }

        @if $can-animate-forever {
            &-animate-forever {
                animation: #{$file-name}-anim $animation-length steps($frame-count) infinite;
            }
        }
    }
}